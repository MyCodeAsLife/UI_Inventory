//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/UserInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInputActions"",
    ""maps"": [
        {
            ""name"": ""InventoryActions"",
            ""id"": ""e6d631bd-75a0-4fbf-b790-932a81cd3593"",
            ""actions"": [
                {
                    ""name"": ""OpenInventory1"",
                    ""type"": ""Button"",
                    ""id"": ""935b16d7-1283-4bf6-afed-4e5a2f42452a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenInventory2"",
                    ""type"": ""Button"",
                    ""id"": ""9e6cf78c-3286-42c7-b8b7-d629d57ebf09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AddItemsToInventory"",
                    ""type"": ""Button"",
                    ""id"": ""e4cb63fa-a750-4295-ba6c-b62567a24a59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RemoveItemsFromInventory"",
                    ""type"": ""Button"",
                    ""id"": ""f04c22b9-e2d2-4871-8b59-b4fd99bab65b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""14075ffb-bb3c-4971-8353-e5936d135d9e"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""OpenInventory1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b80449b0-99aa-4427-859b-772fbf863cd5"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""OpenInventory2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11514d7d-9656-4f9e-8bb3-7c76819594db"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""AddItemsToInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5fa3b9da-a9d3-4dce-8625-214ef1348815"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""RemoveItemsFromInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // InventoryActions
        m_InventoryActions = asset.FindActionMap("InventoryActions", throwIfNotFound: true);
        m_InventoryActions_OpenInventory1 = m_InventoryActions.FindAction("OpenInventory1", throwIfNotFound: true);
        m_InventoryActions_OpenInventory2 = m_InventoryActions.FindAction("OpenInventory2", throwIfNotFound: true);
        m_InventoryActions_AddItemsToInventory = m_InventoryActions.FindAction("AddItemsToInventory", throwIfNotFound: true);
        m_InventoryActions_RemoveItemsFromInventory = m_InventoryActions.FindAction("RemoveItemsFromInventory", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // InventoryActions
    private readonly InputActionMap m_InventoryActions;
    private List<IInventoryActionsActions> m_InventoryActionsActionsCallbackInterfaces = new List<IInventoryActionsActions>();
    private readonly InputAction m_InventoryActions_OpenInventory1;
    private readonly InputAction m_InventoryActions_OpenInventory2;
    private readonly InputAction m_InventoryActions_AddItemsToInventory;
    private readonly InputAction m_InventoryActions_RemoveItemsFromInventory;
    public struct InventoryActionsActions
    {
        private @UserInputActions m_Wrapper;
        public InventoryActionsActions(@UserInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenInventory1 => m_Wrapper.m_InventoryActions_OpenInventory1;
        public InputAction @OpenInventory2 => m_Wrapper.m_InventoryActions_OpenInventory2;
        public InputAction @AddItemsToInventory => m_Wrapper.m_InventoryActions_AddItemsToInventory;
        public InputAction @RemoveItemsFromInventory => m_Wrapper.m_InventoryActions_RemoveItemsFromInventory;
        public InputActionMap Get() { return m_Wrapper.m_InventoryActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InventoryActionsActions set) { return set.Get(); }
        public void AddCallbacks(IInventoryActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_InventoryActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InventoryActionsActionsCallbackInterfaces.Add(instance);
            @OpenInventory1.started += instance.OnOpenInventory1;
            @OpenInventory1.performed += instance.OnOpenInventory1;
            @OpenInventory1.canceled += instance.OnOpenInventory1;
            @OpenInventory2.started += instance.OnOpenInventory2;
            @OpenInventory2.performed += instance.OnOpenInventory2;
            @OpenInventory2.canceled += instance.OnOpenInventory2;
            @AddItemsToInventory.started += instance.OnAddItemsToInventory;
            @AddItemsToInventory.performed += instance.OnAddItemsToInventory;
            @AddItemsToInventory.canceled += instance.OnAddItemsToInventory;
            @RemoveItemsFromInventory.started += instance.OnRemoveItemsFromInventory;
            @RemoveItemsFromInventory.performed += instance.OnRemoveItemsFromInventory;
            @RemoveItemsFromInventory.canceled += instance.OnRemoveItemsFromInventory;
        }

        private void UnregisterCallbacks(IInventoryActionsActions instance)
        {
            @OpenInventory1.started -= instance.OnOpenInventory1;
            @OpenInventory1.performed -= instance.OnOpenInventory1;
            @OpenInventory1.canceled -= instance.OnOpenInventory1;
            @OpenInventory2.started -= instance.OnOpenInventory2;
            @OpenInventory2.performed -= instance.OnOpenInventory2;
            @OpenInventory2.canceled -= instance.OnOpenInventory2;
            @AddItemsToInventory.started -= instance.OnAddItemsToInventory;
            @AddItemsToInventory.performed -= instance.OnAddItemsToInventory;
            @AddItemsToInventory.canceled -= instance.OnAddItemsToInventory;
            @RemoveItemsFromInventory.started -= instance.OnRemoveItemsFromInventory;
            @RemoveItemsFromInventory.performed -= instance.OnRemoveItemsFromInventory;
            @RemoveItemsFromInventory.canceled -= instance.OnRemoveItemsFromInventory;
        }

        public void RemoveCallbacks(IInventoryActionsActions instance)
        {
            if (m_Wrapper.m_InventoryActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInventoryActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_InventoryActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InventoryActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InventoryActionsActions @InventoryActions => new InventoryActionsActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IInventoryActionsActions
    {
        void OnOpenInventory1(InputAction.CallbackContext context);
        void OnOpenInventory2(InputAction.CallbackContext context);
        void OnAddItemsToInventory(InputAction.CallbackContext context);
        void OnRemoveItemsFromInventory(InputAction.CallbackContext context);
    }
}
